function [u1,u2,u3]=computeDisplacementSurfaceGravity( ...
    x1,x2,x3,q1,q2,q3,L,T,theta,sigma33,G,nu)
% Input:
% x1, x2, x3         northing, easting, and depth of the observation point,
% q1, q2, q3         north, east and depth coordinates of the shear zone,
% L, T, W            length, thickness, and width of the shear zone,
% theta (degree)     strike of the shear zone,
% epsvijp            source strain component 11, 12, 13, 22, 23 and 33 
%                    in the shear zone in the system of reference tied to 
%                    the shear zone,
% G, nu              shear modulus and Poisson's ratio in the half space.
%
% Output:
% u1                 displacement component in the north direction,
% u2                 displacement component in the east direction,
% u3                 displacement component in the down direction.
%
% Author: James D. P. Moore (earth@jamesdpmoore.com) - 18/06/2019

% rotate observation points to the shear-zone-centric system of coordinates
t1= (x1-q1)*cosd(theta)+(x2-q2)*sind(theta);
x2=-(x1-q1)*sind(theta)+(x2-q2)*cosd(theta);
x1=t1;

% Green's functions
r1=@(y1,y2,y3) sqrt((x1-y1).^2+(x2-y2).^2+(x3-y3).^2);
r2=@(y1,y2,y3) sqrt((x1-y1).^2+(x2-y2).^2+(x3+y3).^2);

J1312=@(y1,y2,y3) ...
(-1/16).*(1-nu).^(-1).*pi.^(-1).*G.^(-1).*(2.*r2(y1,y2,y3).^(-1).*x3.*( ...
  x2-y2).*y3.*(x3+y3).*((x1-y1).^2+(x3+y3).^2).^(-1)+( ...
  -4).*((-1)+nu).*((-1)+2.*nu).*(x1-y1).*atan3((x1-y1),(x2-y2)) ...
  +4.*((-1)+nu).*((-1)+2.*nu).*(x1-y1).* ...
  atan2(r2(y1,y2,y3).*(x1-y1),(x2-y2).*(x3+y3))+xLogy(4.*((-1)+nu) ...
  .*((-1)+2.*nu).*(x2-y2),r2(y1,y2,y3)+x3+y3)+xLogy(x3-y3,r1(y1,y2,y3)+x2+( ...
  -1).*y2)+xLogy((7+8.*((-2)+nu).*nu).*x3+y3+8.*((-1)+nu).*nu.*y3, ...
  r2(y1,y2,y3)+x2-y2));

J2312=@(y1,y2,y3) ...
(-1/16).*(1-nu).^(-1).*pi.^(-1).*G.^(-1).*(2.*r2(y1,y2,y3).^(-1).*x3.*( ...
  x1-y1).*y3.*(x3+y3).*((x2-y2).^2+(x3+y3).^2).^(-1)+( ...
  -4).*((-1)+nu).*((-1)+2.*nu).*(x2-y2).*atan3((x2-y2),(x1-y1)) ...
  +4.*((-1)+nu).*((-1)+2.*nu).*(x2-y2).* ...
  atan2(r2(y1,y2,y3).*(x2-y2),(x1-y1).*(x3+y3))+xLogy(4.*((-1)+nu) ...
  .*((-1)+2.*nu).*(x1-y1),r2(y1,y2,y3)+x3+y3)+xLogy(x3-y3,r1(y1,y2,y3)+x1+( ...
  -1).*y1)+xLogy((7+8.*((-2)+nu).*nu).*x3+y3+8.*((-1)+nu).*nu.*y3, ...
  r2(y1,y2,y3)+x1-y1));

J3312=@(y1,y2,y3) ...
(1/16).*(1-nu).^(-1).*pi.^(-1).*G.^(-1).*(2.*r2(y1,y2,y3).^(-1).*x3.*( ...
  x1-y1).*(x2-y2).*y3.*((x1-y1).^2+(x3+y3).^2).^( ...
  -1).*((x2-y2).^2+(x3+y3).^2).^(-1).*((x1-y1).^2+(x2+( ...
  -1).*y2).^2+2.*(x3+y3).^2)-3.*x3.*atan2(3.*x3,x1-y1) ...
  -5.*x3.*atan2(5.*x3,x2-y2)+12.*nu.*x3.*atan2((-3).*nu.*x3,x2+( ...
  -1).*y2)+4.*nu.*x3.*atan2(-nu.*x3,x1-y1)-8.*nu.^2.* ...
  x3.*atan2(nu.^2.*x3,x2-y2)+3.*y3.*atan2((-3).*y3,x1- ...
  y1)-5.*y3.*atan2(5.*y3,x2-y2)+12.*nu.*y3.*atan2((-3).* ...
  nu.*y3,x2-y2)-4.*nu.*y3.*atan2(nu.*y3,x1-y1)-8.* ...
  nu.^2.*y3.*atan2(nu.^2.*y3,x2-y2)+2.*((-1)+2.*nu).*(x3+(-1) ...
  .*y3).*atan2(r1(y1,y2,y3).*(-x3+y3),(x1-y1).*(x2-y2))+2.*( ...
  1-2.*nu).^2.*(x3+y3).*atan2(r2(y1,y2,y3).*(x3+y3),(x1-y1).*(x2+(-1) ...
  .*y2))+xLogy(-((-3)+4.*nu).*(x1-y1),r1(y1,y2,y3)+x2-y2)+ ...
  xLogy((5+4.*nu.*((-3)+2.*nu)).*(x1-y1),r2(y1,y2,y3)+x2-y2)+ ...
  xLogy(-((-3)+4.*nu).*(x2-y2),r1(y1,y2,y3)+x1-y1)+xLogy((5+ ...
  4.*nu.*((-3)+2.*nu)).*(x2-y2),r2(y1,y2,y3)+x1-y1));

IU1=@(y1,y2,y3) J1312(y1,y2,y3+1)*sigma33;

IU2=@(y1,y2,y3) J2312(y1,y2,y3+1)*sigma33;

IU3=@(y1,y2,y3) J3312(y1,y2,y3+1)*sigma33;

u1= IU1(L,T/2,0)-IU1(L,-T/2,0)+IU1(0,-T/2,0)-IU1(0,T/2,0);
u2= IU2(L,T/2,0)-IU2(L,-T/2,0)+IU2(0,-T/2,0)-IU2(0,T/2,0);
u3= IU3(L,T/2,0)-IU3(L,-T/2,0)+IU3(0,-T/2,0)-IU3(0,T/2,0);
 
% rotate displacement field to reference system of coordinates
t1=u1*cosd(theta)-u2*sind(theta);
u2=u1*sind(theta)+u2*cosd(theta);
u1=t1;

    function z=xLogy(x,y)
        z=x.*log(y);
        z(0==x)=0;
    end

    function z=atan3(y,x)
        z=atan(y./x);
        pos=(0==x);
        z(pos)=sign(y(pos))*pi/2;
    end

end








